[{"title":"IoC容器浅析及简单实现","url":"%2F2018%2F11%2F25%2FIoC%E5%AE%B9%E5%99%A8%E6%B5%85%E6%9E%90%E5%8F%8A%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0.html","content":"\nSpring IoC 容器是 Spring 框架中最核心的部分，也是初学者难以理解的部分，对于这种关键的设计，简单实现一次能最大限度地加深理解，了解其中思想，对以后的开发也大有裨益。\n\n\n\n<!-- more -->\n\n#   Spring IoC 容器浅析及简单实现\n\n\n##\tSpring IoC 概述\n\n原生的 JavaEE 技术中各个模块之间的联系较强，即`耦合度较高`。\n\n比如完成一个用户的创建事务，视图层会创建业务逻辑层的对象，再在内部调用对象的方法，各个模块的`独立性很差`，如果某一模块的代码发生改变，其他模块的改动也会很大。\n\n而 Spring 框架的核心——IoC（控制反转）很好的解决了这一问题。控制反转，即`某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定`，即由 Spring 容器借由 Bean 配置来进行控制。\n\n可能 IoC 不够开门见山，理解起来较为困难。因此， Martin Fowler 提出了 DI（Dependency Injection，依赖注入）的概念来替代 IoC，即`让调用类对某一接口实现类的依赖关系由第三方（容器或写协作类）注入，以移除调用类对某一接口实现类的依赖`。\n\n比如说， 上述例子中，视图层使用业务逻辑层的接口变量，而不需要真正 new 出接口的实现，这样即使接口产生了新的实现或原有实现修改，视图层都能正常运行。\n\n从注入方法上看，IoC 主要划分为三种类型：构造函数注入、属性注入和接口注入。在开发过程中，一般使用`属性注入`的方法。\n\nIoC 不仅可以实现`类之间的解耦`，还能帮助完成`类的初始化与装配工作`，让开发者从这些底层实现类的实例化、依赖关系装配等工作中解脱出出来，专注于更有意义的业务逻辑开发工作。\n\n##\tSpring IoC 简单实现\n\n下面实现了一个IoC容器的核心部分，简单模拟了IoC容器的基本功能。\n\n\n下面列举出核心类：\n\nStudent.java\n\n```java\n/**\n * @ClassName Student\n * @Description 学生实体类\n * @Author Yixiang Zhao\n * @Date 2018/9/22 9:19\n * @Version 1.0\n */\npublic class Student {\n\n    private String name;\n\n    private String gender;\n\n    public void intro() {\n        System.out.println(\"My name is \" + name + \" and I'm \" + gender + \" .\");\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getGender() {\n        return gender;\n    }\n\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n}\n```\n\nStuService.java\n\n```java\n/**\n * @ClassName StuService\n * @Description 学生Service\n * @Author Yixiang Zhao\n * @Date 2018/9/22 9:21\n * @Version 1.0\n */\npublic class StuService {\n\n    private Student student;\n\n    public Student getStudent() {\n        return student;\n    }\n\n    public void setStudent(Student student) {\n        this.student = student;\n    }\n}\n```\n\nbeans.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<beans>\n    <bean id=\"Student\" class=\"me.seriouszyx.pojo.Student\">\n        <property name=\"name\" value=\"ZYX\"/>\n        <property name=\"gender\" value=\"man\"/>\n    </bean>\n\n    <bean id=\"StuService\" class=\"me.seriouszyx.service.StuService\">\n        <property ref=\"Student\"/>\n    </bean>\n</beans>\n```\n\n下面是核心类 ClassPathXMLApplicationContext.java\n\n```java\n\n/**\n * @ClassName ClassPathXMLApplicationContext\n * @Description ApplicationContext的实现，核心类\n * @Author Yixiang Zhao\n * @Date 2018/9/22 9:40\n * @Version 1.0\n */\npublic class ClassPathXMLApplicationContext implements ApplicationContext {\n\n    private Map map = new HashMap();\n\n    public ClassPathXMLApplicationContext(String location) {\n        try {\n            Document document = getDocument(location);\n            XMLParsing(document);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 加载资源文件，转换成Document类型\n    private Document getDocument(String location) throws JDOMException, IOException {\n        SAXBuilder saxBuilder = new SAXBuilder();\n        return saxBuilder.build(this.getClass().getClassLoader().getResource(location));\n    }\n\n    private void XMLParsing(Document document) throws Exception {\n        // 获取XML文件根元素beans\n        Element beans = document.getRootElement();\n        // 获取beans下的bean集合\n        List beanList = beans.getChildren(\"bean\");\n        // 遍历beans集合\n        for (Iterator iter = beanList.iterator(); iter.hasNext(); ) {\n            Element bean = (Element) iter.next();\n            // 获取bean的属性id和class，id为类的key值，class为类的路径\n            String id = bean.getAttributeValue(\"id\");\n            String className = bean.getAttributeValue(\"class\");\n            // 动态加载该bean代表的类\n            Object obj = Class.forName(className).newInstance();\n            // 获得该类的所有方法\n            Method[] methods = obj.getClass().getDeclaredMethods();\n            // 获取该节点的所有子节点，子节点存储类的初始化参数\n            List<Element> properties = bean.getChildren(\"property\");\n            // 遍历，将初始化参数和类的方法对应，进行类的初始化\n            for (Element pro : properties) {\n                for (int i = 0; i < methods.length; i++) {\n                    String methodName = methods[i].getName();\n                    if (methodName.startsWith(\"set\")) {\n                        String classProperty = methodName.substring(3, methodName.length()).toLowerCase();\n                        if (pro.getAttribute(\"name\") != null) {\n                            if (classProperty.equals(pro.getAttribute(\"name\").getValue())) {\n                                methods[i].invoke(obj, pro.getAttribute(\"value\").getValue());\n                            }\n                        } else {\n                            methods[i].invoke(obj, map.get(pro.getAttribute(\"ref\").getValue()));\n                        }\n                    }\n                }\n            }\n            // 将初始化完成的对象添加到HashMap中\n            map.put(id, obj);\n        }\n    }\n\n    public Object getBean(String name) {\n        return map.get(name);\n    }\n\n}\n```\n\n最后进行测试\n\n```java\npublic class MyIoCTest {\n    public static void main(String[] args) {\n        ApplicationContext context = new ClassPathXMLApplicationContext(\"beans.xml\");\n        StuService stuService = (StuService) context.getBean(\"StuService\");\n        stuService.getStudent().intro();\n    }\n}\n```\n\n测试成功！\n\n```text\nMy name is ZYX and I'm man .\n\nProcess finished with exit code 0\n```\n\n##\t源码\n\n代码在我的 [GitHub](https://github.com/seriouszyx/LearnSpring/tree/master/mycode/SimpleIoC)开源，欢迎一起交流讨论。\n\n##\t总结\n\n熟悉一个框架最好的方式，就是亲手实现它。这样不仅会深刻地认识到框架的工作原理，以后的使用也会更加得心应手。\n\n此外，在实现的过程中，又会收获很多东西，就像实现 IoC 容器一样，不仅了解解析 XML 文件的 JDOM 工具，还加深了对 Java 反射的理解。在实际开发中，几乎没有任何地方需要用到反射这一技术，但在框架实现过程中，不懂反射则寸步难行。\n\n>\t更多的 Spring 学习心得请戳[Spring 框架学习](https://github.com/seriouszyx/LearnSpring)","tags":["Java"],"categories":["知识总结"]}]